# Organization info
$ORG = "NCBO"
$ORG_URL = "http://www.bioontology.org"

# Site name (required)
$SITE = "BioPortal"

# The URL for the BioPortal Rails UI (this application)
$UI_URL = "http://bioportal.bioontology.org"

# If you are running a PURL server to provide URLs for ontologies in your BioPortal instance, enable this option
$PURL_ENABLED = false

# The PURL URL is generated using this prefix + the abbreviation for an ontology.
# The PURL URL generation algorithm can be altered in app/models/ontology_wrapper.rb 
$PURL_PREFIX = "http://purl.bioontology.org/ontology"

# If your BioPortal installation includes Annotator set this to false
$ANNOTATOR_DISABLED = true

# If your BioPortal installation includes Resource Index set this to false
$RESOURCE_INDEX_DISABLED = true

# Unique string representing the UI's id for use with the BioPortal Core
$API_KEY = "" 

# REST core service address
$REST_URL = "http://domain.com:8080/bioportal"

# REST domain: this is the domain that hosts your services (Core, OBS, OBR, etc)
$REST_DOMAIN = "domain.com"

# Resource Index REST service address
$RESOURCE_INDEX_REST_URL = "http://domain.com/resource_index"

# Max number of children to return when rendering a tree view
$MAX_CHILDREN = 2500

# Max number of children that it's possible to display (more than this is either too slow or not helpful to users)
$MAX_POSSIBLE_DISPLAY = 10000

# Resource Index UI Location
$RESOURCE_INDEX_UI_URL = "http://ncbodev-riui1.stanford.edu/stage"

# Max size allowed for uploaded files
$MAX_UPLOAD_SIZE = 1073741824

# REST core service port number
$REST_PORT = "8080"

# Release version text (appears in footer of all pages, except 404 and 500 errors)
$RELEASE_VERSION = ""

# Pairing a name with an array of ontology virtual ids will allow you to filter ontologies based on a subdomain.
# If your main UI is hosted at example.org and you add custom.example.org pointing to the same Rails installation
# you could filter the ontologies visible at custom.example.org by adding this to the hash: "custom" => { :name => "Custom Slice", :ontologies => [1032, 1054, 1099] }
# Any number of slices can be added. Groups are added automatically using the group acronym as the subdomain.
$ENABLE_SLICES = false
$ONTOLOGY_SLICES = {}

# Enables a help page maintained elsewhere that is read and displayed. Content is stored in a div with id 'bodyContent'.
$WIKI_HELP_PAGE = ""

# Google Analytics ID (optional)
$ANALYTICS_ID = ""

# If you plan on using Airbrake to track exceptions then provide your API Key here
$AIRBRAKE_API_KEY = ""

# If you don't use Airbrake you can have exceptions emailed to the $ERROR_EMAIL address by setting this to 'true'
$EMAIL_EXCEPTIONS = true

# Email settings
ActionMailer::Base.smtp_settings = {
  :address  => "", # smtp server address, ex: smtp.domain.com
  :port  => 25, # smtp server port
  :domain  => "", # fqdn of rails server, ex: rails.domain.com
} 

# Announcements mailman mailing list REQUEST address, EX: list-request@lists.example.org
# NOTE: You must use the REQUEST address for the mailing list. ONLY WORKS WITH MAILMAN LISTS.
$ANNOUNCE_LIST = "bioportal-test-request@lists.stanford.edu"

# Email addresses used for sending notifications (errors, feedback, support)
$SUPPORT_EMAIL = "recipient@domain.com"
$ADMIN_EMAIL = "recipient@domain.com"
$ERROR_EMAIL = "recipient@domain.com"

# reCAPTCHA
# In order to use reCAPTCHA on the user account creation page:
#    1. Obtain a key from reCAPTCHA: http://recaptcha.net
#    2. Include the corresponding keys below (between the single quotes)
#    3. Set the USE_RECAPTCHA option to 'true'
ENV['USE_RECAPTCHA'] = 'false'
ENV['RECAPTCHA_PUBLIC_KEY']  = ''
ENV['RECAPTCHA_PRIVATE_KEY'] = ''

# Custom BioPortal logging
require 'log'
$REMOTE_LOGGING = false

# The Web UI allows you to use a virtual or version id in URLs. However there is no system on the REST side
# that would prevent range collisions. Generally you can set the version ids to be much higher than the virtual.
# In practice you may end up with version ids in the virtual range which you can identify with the $VERSIONS_IN_VIRTUAL_SPACE
# set. In combination with the $VIRTUAL_ID_UPPER_LIMIT option the Web UI should be able to disambiguate the two id
# types based on a single input.
$VERSIONS_IN_VIRTUAL_SPACE = Set.new([])
$VIRTUAL_ID_UPPER_LIMIT = 9999

##
# Flex Options
##

# Increment the following 'version' to prevent caching when Flex apps are updated
$FLEX_VERSION = "1.0.8"

# URL to pull Flex apps from
# Default uses Flex apps hosted at University of Victoria, you should only change this
# if you are hosting the apps yourself.
$FLEX_URL = "/flex"

# Flex App API keys
$ANNOTATOR_FLEX_APIKEY = ""
$SEARCH_FLEX_APIKEY = ""
$RECOMMENDER_FLEX_APIKEY = ""
$FLEXOVIZ_APIKEY = ""


#################################
## AUTO-GENERATED DO NOT MODIFY
#################################

# Full string for site, EX: "NCBO BioPortal"
$ORG_SITE = ($ORG.nil? || $ORG.empty?) ? $SITE : "#{$ORG} #{$SITE}"

# Email address to mail when exceptions are raised
ExceptionNotifier.exception_recipients = [$ERROR_EMAIL]


